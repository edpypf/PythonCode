# Lazy Property
## Using python descriptors to return from cached value instead of running it
import random
import time

class Lazy:
    def __init__(self, function):
        self.function=function
        self.name=function.__name__

    def __get__(self, obj, type=None) -> object:
        obj.__dict__[self.name]=self.function(obj)
        return obj.__dict__[self.name]

class Waiting:
    @Lazy
    def wait(self):
        time.sleep(3)
        return 33
    
x=Waiting()    
print(x.wait)
print(x.wait)
print(x.wait)

## but if you define the setting, then the cached value won't work
class Lazy:
    def __init__(self, function):
        self.function=function
        self.name=function.__name__

    def __get__(self, obj, type=None) -> object:
        obj.__dict__[self.name]=self.function(obj)
        return obj.__dict__[self.name]
    
    #### ********when create the set function, lazy desc cached value won't work ********** ##
    def __set__(self, obj, value):
        pass

class Waiting:
    @Lazy
    def wait(self):
        time.sleep(3)
        return 33
    
x=Waiting()    
print(x.wait)
print(x.wait)
print(x.wait)
