## Using python descriptors to return from cached value instead of running it
import random
import time

class Lazy:
    def __init__(self, function):
        self.function=function
        self.name=function.__name__

    def __get__(self, obj, type=None) -> object:
        obj.__dict__[self.name]=self.function(obj)
        return obj.__dict__[self.name]

class Waiting:
    @Lazy
    def wait(self):
        time.sleep(3)
        return 33
    
x=Waiting()    
print(x.wait)
print(x.wait)
print(x.wait)

## but if you define the setting, then the cached value won't work
class Lazy:
    def __init__(self, function):
        self.function=function
        self.name=function.__name__

    def __get__(self, obj, type=None) -> object:
        obj.__dict__[self.name]=self.function(obj)
        return obj.__dict__[self.name]
    
    #### ********when create the set function, lazy desc cached value won't work ********** ##
    def __set__(self, obj, value):
        pass

class Waiting:
    @Lazy
    def wait(self):
        time.sleep(3)
        return 33
    
x=Waiting()    
print(x.wait)
print(x.wait)
print(x.wait)

## save redundant code using descriptor, remove the repeated coding
### *************************** Repeated coding ***************************** ##
class Values:
    def __init__(self):
        self._value1=0
        self._value2=0
        self._value3=0
        self._value4=0
        self._value5=0

    @property
    def value1(self):
        return self._value1
    
    @value1.setter
    def value1(self, value):
        self._value1 = value if value % 2 == 0 else 0

    @property
    def value2(self):
        return self._value2
    
    @value2.setter
    def value2(self, value):
        self._value2 = value if value % 2 == 0 else 0        

    ## Repeat above two for value3, value4, value5. 

myValues = Values()
myValues.value1=1
myValues.value2=4
print(myValues.value1)
print(myValues.value2)

### *************************** Descriptor optimized code ***************************** ##
class EvenNumber:
    def __set_name__(self, owner, name):
        self.name=name
    def __get__(self, obj, type=None)->object:
        return obj.__dict__.get(self.name) or 0
    def __set__(self, obj, value)->None:
        obj.__dict__[self.name]=(value if value%2==0 else 0)

class Values:
    def __init__(self):
        self._value1=EvenNumber()
        self._value2=EvenNumber()
        self._value3=EvenNumber()
        self._value4=EvenNumber()
        self._value5=EvenNumber()

myValues = Values()
myValues.value1=1
myValues.value2=4
print(myValues.value1)
print(myValues.value2)
